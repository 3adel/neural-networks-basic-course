{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Neoton raphson method in 2D\n",
    "\n",
    "#show plot inline\n",
    "%matplotlib inline\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0625\n"
     ]
    }
   ],
   "source": [
    "def f (x) :\n",
    "  return x**6/6 - 3*x**4 - 2*x**3/3 + 27*x**2/2 + 18*x - 30\n",
    "\n",
    "#derivative of f(x)\n",
    "def d_f (x) :\n",
    "  return x**5 - 12*x**3 - 2*x**2 + 27*x +18\n",
    "\n",
    "print(1-f(1)/d_f(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1144b0f98>]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the function f(x)\n",
    "T = np.linspace(-4, 4, 100)\n",
    "Y = f(T)\n",
    "plt.grid(color='b', linestyle='--', linewidth=1)\n",
    "plt.plot(T, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#start at x = 1\n",
    "x = 1\n",
    "d = {\"x\" : [x], \"f(x)\": [f(x)]}\n",
    "for i in range(0, 20):\n",
    "    x = x - f(x) / d_f(x)\n",
    "    d[\"x\"].append(x)\n",
    "    d[\"f(x)\"].append(f(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'x': [1, 1.0625, 1.0630705699119678, 1.0630706297096963, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697, 1.063070629709697], 'f(x)': [-2.0, -0.0179103116194419, -1.8766699483308003e-06, -2.1316282072803006e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}\n"
     ]
    }
   ],
   "source": [
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
